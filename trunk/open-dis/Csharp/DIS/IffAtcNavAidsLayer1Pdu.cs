using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Xml.Serialization;
using DISnet.DataStreamUtilities;

namespace DIS1998net
{

/**
 * 5.3.7.4.1: Navigational and IFF PDU. COMPLETE
 *
 * Copyright (c) 2008, MOVES Institute, Naval Postgraduate School. All rights reserved.
 * This work is licensed under the BSD open source license, available at https://www.movesinstitute.org/licenses/bsd.html
 *
 * @author DMcG
 * Modified for use with C#:
 * Peter Smith (Naval Air Warfare Center - Training Systems Division)
 */
[Serializable]
[XmlRoot]
[XmlInclude(typeof(EntityID))]
[XmlInclude(typeof(EventID))]
[XmlInclude(typeof(Vector3Float))]
[XmlInclude(typeof(SystemID))]
[XmlInclude(typeof(IffFundamentalData))]
public class IffAtcNavAidsLayer1Pdu : DistributedEmissionsFamilyPdu
{
   /** ID of the entity that is the source of the emissions */
   protected EntityID  _emittingEntityId = new EntityID(); 

   /** Number generated by the issuing simulation to associate realted events. */
   protected EventID  _eventID = new EventID(); 

   /** Location wrt entity. There is some ambugiuity in the standard here, but this is the order it is listed in the table. */
   protected Vector3Float  _location = new Vector3Float(); 

   /** System ID information */
   protected SystemID  _systemID = new SystemID(); 

   /** padding */
   protected ushort  _pad2;

   /** fundamental parameters */
   protected IffFundamentalData  _fundamentalParameters = new IffFundamentalData(); 


/** Constructor */
 public IffAtcNavAidsLayer1Pdu()
 {
    PduType = (byte)28;
 }

public int getMarshalledSize()
{
   int marshalSize = 0; 

   marshalSize = base.getMarshalledSize();
   marshalSize = marshalSize + _emittingEntityId.getMarshalledSize();  // _emittingEntityId
   marshalSize = marshalSize + _eventID.getMarshalledSize();  // _eventID
   marshalSize = marshalSize + _location.getMarshalledSize();  // _location
   marshalSize = marshalSize + _systemID.getMarshalledSize();  // _systemID
   marshalSize = marshalSize + 2;  // _pad2
   marshalSize = marshalSize + _fundamentalParameters.getMarshalledSize();  // _fundamentalParameters

   return marshalSize;
}


public void setEmittingEntityId(EntityID pEmittingEntityId)
{ _emittingEntityId = pEmittingEntityId;
}

public EntityID getEmittingEntityId()
{ return _emittingEntityId; 
}

[XmlElement(Type= typeof(EntityID), ElementName="emittingEntityId")]
public EntityID EmittingEntityId
{
     get
{
          return _emittingEntityId;
}
     set
{
          _emittingEntityId = value;
}
}

public void setEventID(EventID pEventID)
{ _eventID = pEventID;
}

public EventID getEventID()
{ return _eventID; 
}

[XmlElement(Type= typeof(EventID), ElementName="eventID")]
public EventID EventID
{
     get
{
          return _eventID;
}
     set
{
          _eventID = value;
}
}

public void setLocation(Vector3Float pLocation)
{ _location = pLocation;
}

public Vector3Float getLocation()
{ return _location; 
}

[XmlElement(Type= typeof(Vector3Float), ElementName="location")]
public Vector3Float Location
{
     get
{
          return _location;
}
     set
{
          _location = value;
}
}

public void setSystemID(SystemID pSystemID)
{ _systemID = pSystemID;
}

public SystemID getSystemID()
{ return _systemID; 
}

[XmlElement(Type= typeof(SystemID), ElementName="systemID")]
public SystemID SystemID
{
     get
{
          return _systemID;
}
     set
{
          _systemID = value;
}
}

public void setPad2(ushort pPad2)
{ _pad2 = pPad2;
}

[XmlElement(Type= typeof(ushort), ElementName="pad2")]
public ushort Pad2
{
     get
{
          return _pad2;
}
     set
{
          _pad2 = value;
}
}

public void setFundamentalParameters(IffFundamentalData pFundamentalParameters)
{ _fundamentalParameters = pFundamentalParameters;
}

public IffFundamentalData getFundamentalParameters()
{ return _fundamentalParameters; 
}

[XmlElement(Type= typeof(IffFundamentalData), ElementName="fundamentalParameters")]
public IffFundamentalData FundamentalParameters
{
     get
{
          return _fundamentalParameters;
}
     set
{
          _fundamentalParameters = value;
}
}


public void marshal(DataOutputStream dos)
{
    base.marshal(dos);
    try 
    {
       _emittingEntityId.marshal(dos);
       _eventID.marshal(dos);
       _location.marshal(dos);
       _systemID.marshal(dos);
       dos.writeUshort( (ushort)_pad2);
       _fundamentalParameters.marshal(dos);
    } // end try 
    catch(Exception e)
    { 
      Trace.WriteLine(e);
      Trace.Flush();
    }
} // end of marshal method

public void unmarshal(DataInputStream dis)
{
    base.unmarshal(dis);

    try 
    {
       _emittingEntityId.unmarshal(dis);
       _eventID.unmarshal(dis);
       _location.unmarshal(dis);
       _systemID.unmarshal(dis);
       _pad2 = dis.readUshort();
       _fundamentalParameters.unmarshal(dis);
    } // end try 
   catch(Exception e)
    { 
      Trace.WriteLine(e); 
      Trace.Flush();
    }
 } // end of unmarshal method 


public void reflection(StringBuilder sb)
{
    sb.Append("----- IffAtcNavAidsLayer1Pdu-----"  + System.Environment.NewLine);
    base.reflection(sb);
    try 
    {
       sb.Append("=====_emittingEntityId=====" + System.Environment.NewLine);
       _emittingEntityId.reflection(sb);
       sb.Append("=====_eventID=====" + System.Environment.NewLine);
       _eventID.reflection(sb);
       sb.Append("=====_location=====" + System.Environment.NewLine);
       _location.reflection(sb);
       sb.Append("=====_systemID=====" + System.Environment.NewLine);
       _systemID.reflection(sb);
           sb.Append("ushort\t _pad2\t " + _pad2.ToString() + System.Environment.NewLine);
       sb.Append("=====_fundamentalParameters=====" + System.Environment.NewLine);
       _fundamentalParameters.reflection(sb);
    } // end try 
    catch(Exception e)
    { 
      Trace.WriteLine(e);
      Trace.Flush();
}
    } // end of marshal method

 /**
  * The equals method doesn't always work--mostly it works only on on classes that consist only of primitives. Be careful.
  */
 public bool equals(IffAtcNavAidsLayer1Pdu rhs)
 {
     bool ivarsEqual = true;

    if(rhs.GetType() != this.GetType())
        return false;

     if( ! (_emittingEntityId.Equals( rhs._emittingEntityId) )) ivarsEqual = false;
     if( ! (_eventID.Equals( rhs._eventID) )) ivarsEqual = false;
     if( ! (_location.Equals( rhs._location) )) ivarsEqual = false;
     if( ! (_systemID.Equals( rhs._systemID) )) ivarsEqual = false;
     if( ! (_pad2 == rhs._pad2)) ivarsEqual = false;
     if( ! (_fundamentalParameters.Equals( rhs._fundamentalParameters) )) ivarsEqual = false;

    return ivarsEqual;
 }
} // end of class
} // end of namespace
