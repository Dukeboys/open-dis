Index: DeadReckoningParameter.java
===================================================================
--- DeadReckoningParameter.java	(revision 289)
+++ DeadReckoningParameter.java	(working copy)
@@ -1,6 +1,5 @@
 package edu.nps.moves.dis;
 
-import java.util.*;
 import java.io.*;
 import javax.xml.bind.annotation.*;
 
@@ -12,173 +11,165 @@
  *
  * @author DMcG
  */
-public class DeadReckoningParameter extends Object implements Serializable
-{
-   /** enumeration of what dead reckoning algorighm to use */
-   protected short  deadReckoningAlgorithm;
+public class DeadReckoningParameter implements Serializable {
 
-   /** other parameters to use in the dead reckoning algorithm */
-   protected byte[]  otherParameters = new byte[15]; 
+    /** enumeration of what dead reckoning algorighm to use */
+    protected short deadReckoningAlgorithm;
 
-   /** Linear acceleration of the entity */
-   protected Vector3Float  entityLinearAcceleration = new Vector3Float(); 
+    /** other parameters to use in the dead reckoning algorithm */
+    protected byte[] otherParameters = new byte[15];
 
-   /** angular velocity of the entity */
-   protected Vector3Float  entityAngularVelocity = new Vector3Float(); 
+    /** Linear acceleration of the entity */
+    protected Vector3Float entityLinearAcceleration = new Vector3Float();
 
+    /** angular velocity of the entity */
+    protected Vector3Float entityAngularVelocity = new Vector3Float();
 
-/** Constructor */
- public DeadReckoningParameter()
- {
- }
+    /** Constructor */
+    public DeadReckoningParameter() {
+        deadReckoningAlgorithm = 0;
+    }
 
-public int getMarshalledSize()
-{
-   int marshalSize = 0; 
+    public int getMarshalledSize() {
+        int marshalSize = 0;
 
-   marshalSize = marshalSize + 1;  // deadReckoningAlgorithm
-   marshalSize = marshalSize + 15 * 1;  // otherParameters
-   marshalSize = marshalSize + entityLinearAcceleration.getMarshalledSize();  // entityLinearAcceleration
-   marshalSize = marshalSize + entityAngularVelocity.getMarshalledSize();  // entityAngularVelocity
+        marshalSize += 1;  // deadReckoningAlgorithm
+        marshalSize += 15;  // otherParameters
+        marshalSize += entityLinearAcceleration.getMarshalledSize();  // entityLinearAcceleration
+        marshalSize += entityAngularVelocity.getMarshalledSize();  // entityAngularVelocity
 
-   return marshalSize;
-}
+        return marshalSize;
+    }
 
+    public void setDeadReckoningAlgorithm(short pDeadReckoningAlgorithm) {
+        deadReckoningAlgorithm = pDeadReckoningAlgorithm;
+    }
 
-public void setDeadReckoningAlgorithm(short pDeadReckoningAlgorithm)
-{ deadReckoningAlgorithm = pDeadReckoningAlgorithm;
-}
+    @XmlAttribute
+    public short getDeadReckoningAlgorithm() {
+        return deadReckoningAlgorithm;
+    }
 
-@XmlAttribute
-public short getDeadReckoningAlgorithm()
-{ return deadReckoningAlgorithm; 
-}
+    public void setOtherParameters(byte[] pOtherParameters) {
+        otherParameters = pOtherParameters;
+    }
 
-public void setOtherParameters(byte[] pOtherParameters)
-{ otherParameters = pOtherParameters;
-}
+    @XmlElement(name = "otherParameters")
+    public byte[] getOtherParameters() {
+        return otherParameters;
+    }
 
-@XmlElement(name="otherParameters" )
-public byte[] getOtherParameters()
-{ return otherParameters; }
+    public void setEntityLinearAcceleration(Vector3Float pEntityLinearAcceleration) {
+        entityLinearAcceleration = pEntityLinearAcceleration;
+    }
 
-public void setEntityLinearAcceleration(Vector3Float pEntityLinearAcceleration)
-{ entityLinearAcceleration = pEntityLinearAcceleration;
-}
+    @XmlElement
+    public Vector3Float getEntityLinearAcceleration() {
+        return entityLinearAcceleration;
+    }
 
-@XmlElement
-public Vector3Float getEntityLinearAcceleration()
-{ return entityLinearAcceleration; 
-}
+    public void setEntityAngularVelocity(Vector3Float pEntityAngularVelocity) {
+        entityAngularVelocity = pEntityAngularVelocity;
+    }
 
-public void setEntityAngularVelocity(Vector3Float pEntityAngularVelocity)
-{ entityAngularVelocity = pEntityAngularVelocity;
-}
+    @XmlElement
+    public Vector3Float getEntityAngularVelocity() {
+        return entityAngularVelocity;
+    }
 
-@XmlElement
-public Vector3Float getEntityAngularVelocity()
-{ return entityAngularVelocity; 
-}
+    public void marshal(DataOutputStream dos) {
+        try {
+            dos.writeByte((byte) deadReckoningAlgorithm);
 
+            for (int idx = 0; idx < otherParameters.length; idx++) {
+                dos.writeByte(otherParameters[idx]);
+            }
 
-public void marshal(DataOutputStream dos)
-{
-    try 
-    {
-       dos.writeByte( (byte)deadReckoningAlgorithm);
+            entityLinearAcceleration.marshal(dos);
+            entityAngularVelocity.marshal(dos);
+        } catch (Exception e) {
+            System.out.println(e);
+        }
+    }
 
-       for(int idx = 0; idx < otherParameters.length; idx++)
-       {
-           dos.writeByte(otherParameters[idx]);
-       } // end of array marshaling
-
-       entityLinearAcceleration.marshal(dos);
-       entityAngularVelocity.marshal(dos);
-    } // end try 
-    catch(Exception e)
-    { 
-      System.out.println(e);}
-    } // end of marshal method
-
-public void unmarshal(DataInputStream dis)
-{
-    try 
-    {
-       deadReckoningAlgorithm = (short)dis.readUnsignedByte();
-       for(int idx = 0; idx < otherParameters.length; idx++)
-       {
+    public void unmarshal(DataInputStream dis) {
+        try {
+            deadReckoningAlgorithm = (short) dis.readUnsignedByte();
+            for (int idx = 0; idx < otherParameters.length; idx++) {
                 otherParameters[idx] = dis.readByte();
-       } // end of array unmarshaling
-       entityLinearAcceleration.unmarshal(dis);
-       entityAngularVelocity.unmarshal(dis);
-    } // end try 
-   catch(Exception e)
-    { 
-      System.out.println(e); 
+            }
+            entityLinearAcceleration.unmarshal(dis);
+            entityAngularVelocity.unmarshal(dis);
+        } catch (Exception e) {
+            System.out.println(e);
+        }
     }
- } // end of unmarshal method 
 
+    /**
+     * Packs a Pdu into the ByteBuffer.
+     * @throws java.nio.BufferOverflowException if buff is too small
+     * @throws java.nio.ReadOnlyBufferException if buff is read only
+     * @see java.nio.ByteBuffer
+     * @param buff The ByteBuffer at the position to begin writing
+     * @since ??
+     */
+    public void marshal(java.nio.ByteBuffer buff) {
+        buff.put((byte) deadReckoningAlgorithm);
 
-/**
- * Packs a Pdu into the ByteBuffer.
- * @throws java.nio.BufferOverflowException if buff is too small
- * @throws java.nio.ReadOnlyBufferException if buff is read only
- * @see java.nio.ByteBuffer
- * @param buff The ByteBuffer at the position to begin writing
- * @since ??
- */
-public void marshal(java.nio.ByteBuffer buff)
-{
-       buff.put( (byte)deadReckoningAlgorithm);
+        for (byte op : otherParameters) {
+            buff.put(op);
+        }
 
-       for(int idx = 0; idx < otherParameters.length; idx++)
-       {
-           buff.put(otherParameters[idx]);
-       } // end of array marshaling
+        entityLinearAcceleration.marshal(buff);
+        entityAngularVelocity.marshal(buff);
+    }
 
-       entityLinearAcceleration.marshal(buff);
-       entityAngularVelocity.marshal(buff);
-    } // end of marshal method
+    /**
+     * Unpacks a Pdu from the underlying data.
+     * @throws java.nio.BufferUnderflowException if buff is too small
+     * @see java.nio.ByteBuffer
+     * @param buff The ByteBuffer at the position to begin reading
+     * @since ??
+     */
+    public void unmarshal(java.nio.ByteBuffer buff) {
+        deadReckoningAlgorithm = (short) (buff.get() & 0xFF);
+        for (int idx = 0; idx < otherParameters.length; idx++) {
+            otherParameters[idx] = buff.get();
+        }
+        entityLinearAcceleration.unmarshal(buff);
+        entityAngularVelocity.unmarshal(buff);
+    }
 
-/**
- * Unpacks a Pdu from the underlying data.
- * @throws java.nio.BufferUnderflowException if buff is too small
- * @see java.nio.ByteBuffer
- * @param buff The ByteBuffer at the position to begin reading
- * @since ??
- */
-public void unmarshal(java.nio.ByteBuffer buff)
-{
-       deadReckoningAlgorithm = (short)(buff.get() & 0xFF);
-       for(int idx = 0; idx < otherParameters.length; idx++)
-       {
-                otherParameters[idx] = buff.get();
-       } // end of array unmarshaling
-       entityLinearAcceleration.unmarshal(buff);
-       entityAngularVelocity.unmarshal(buff);
- } // end of unmarshal method 
+    /**
+     * The equals method doesn't always work--mostly it works only on classes that consist only of primitives. Be careful.
+     * @param rhs
+     * @return
+     */
+    public boolean equals(DeadReckoningParameter rhs) {
+        boolean ivarsEqual = true;
 
+        if (rhs.getClass() != this.getClass()) {
+            return false;
+        }
 
- /**
-  * The equals method doesn't always work--mostly it works only on classes that consist only of primitives. Be careful.
-  */
- public boolean equals(DeadReckoningParameter rhs)
- {
-     boolean ivarsEqual = true;
+        if (!(deadReckoningAlgorithm == rhs.deadReckoningAlgorithm)) {
+            ivarsEqual = false;
+        }
 
-    if(rhs.getClass() != this.getClass())
-        return false;
+        for (int idx = 0; idx < 15; idx++) {
+            if (!(otherParameters[idx] == rhs.otherParameters[idx])) {
+                ivarsEqual = false;
+            }
+        }
 
-     if( ! (deadReckoningAlgorithm == rhs.deadReckoningAlgorithm)) ivarsEqual = false;
+        if (!(entityLinearAcceleration.equals(rhs.entityLinearAcceleration))) {
+            ivarsEqual = false;
+        }
+        if (!(entityAngularVelocity.equals(rhs.entityAngularVelocity))) {
+            ivarsEqual = false;
+        }
 
-     for(int idx = 0; idx < 15; idx++)
-     {
-          if(!(otherParameters[idx] == rhs.otherParameters[idx])) ivarsEqual = false;
-     }
-
-     if( ! (entityLinearAcceleration.equals( rhs.entityLinearAcceleration) )) ivarsEqual = false;
-     if( ! (entityAngularVelocity.equals( rhs.entityAngularVelocity) )) ivarsEqual = false;
-
-    return ivarsEqual;
- }
+        return ivarsEqual;
+    }
+    
 } // end of class
