--- Pdu.java	2009-01-23 11:48:47.000000000 -0800
+++ PduChanged.java	2009-01-23 00:20:16.000000000 -0800
@@ -3,6 +3,7 @@
 import java.util.*;
 import java.io.*;
 import javax.xml.bind.annotation.*;
+import edu.nps.moves.disutil.*;
 
 /**
  * The superclass for all PDUs. This incorporates the PduHeader record, section 5.2.29.
@@ -16,6 +17,12 @@
  */
 public class Pdu extends Object implements Serializable
 {
+    /** The DIS absolute timestamp mask; used to ensure the LSB in timestamps is always set to 1 */
+    public static final int ABSOLUTE_TIMESTAMP_MASK = 0x00000001;
+    
+    /** The DIS relative timestamp mask; used to ensure the LSB in timestamps is always set to 0 */
+    public static final int RELATIVE_TIMESTAMP_MASK = 0xFFFFFFFE;
+    
    /** The version of the protocol. 5=DIS-1995, 6=DIS-1998. */
    protected short  protocolVersion = 6;
 
@@ -36,7 +43,7 @@
 
    /** zero-filled array of padding */
    protected short  padding = 0;
-
+    
 
 /** Constructor */
  public Pdu()
@@ -212,9 +219,10 @@
 
 
 /**
- * A convenience method for marshalling to a byte array.
+ * A convenience method for marshalling to a byte array. The method will marshal
+ * the PDU as is.
  * This is not as efficient as reusing a ByteBuffer, but it <em>is</em> easy.
- * @return a byte array with the marshalled {@link Pdu}
+ * @return a byte array with the marshalled {@link Pdu}.
  * @since ??
  */
 public byte[] marshal()
@@ -225,6 +233,44 @@
     return data;
 }
 
+/**
+ * A convieneince method to marshal to a byte array with the timestamp set to
+ * the DIS standard for absolute timestamps (which works only if the host is
+ * slaved to NTP). This means the timestamp will roll over every hour.
+ */
+public byte[] marshalWithDisAbsoluteTimestamp()
+{
+    DisTime disTime = DisTime.getInstance();
+    this.setTimestamp(disTime.getDisAbsoluteTimestamp());
+    return this.marshal();
+}
+
+/**
+ * A convieneince method to marshal to a byte array with the timestamp set to
+ * the DIS standard for relative timestamps. The timestamp will roll over every
+ * hour
+ */
+public byte[] marshalWithDisRelativeTimestamp()
+{
+    DisTime disTime = DisTime.getInstance();
+    this.setTimestamp(disTime.getDisRelativeTimestamp());
+    return this.marshal();
+}
+
+/**
+ * A convienience method to marshal a PDU using the NPS-specific format for
+ * timestamps, which is hundredths of a second since the start of the year.
+ * This effectively eliminates the rollover issues from a practical standpoint.
+ * @return
+ */
+public byte[] marshalWithNpsTimestamp()
+{
+    DisTime disTime = DisTime.getInstance();
+    this.setTimestamp(disTime.getNpsTimestamp());
+    return this.marshal();
+}
+ 
+
  /**
   * The equals method doesn't always work--mostly on on classes that consist only of primitives. Be careful.
   */
